//
//  IOS7SiteNavSearchTableViewController.swift
//  Intapp
//
//  Created by ra3571 on 5/20/15.
//  Copyright (c) 2015 Freescale. All rights reserved.
//

import UIKit

class IOS7SiteNavSearchTableViewController: UITableViewController, Selectable {

    var tableData2 = [String:AnyObject]()
    
    // when a table cell is clicked we set the value
    var selectedValue: AnyObject?


    @IBOutlet var headerCell: UILabel!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
         populateTableData()

        // Uncomment the following line to preserve selection between presentations
        // self.clearsSelectionOnViewWillAppear = false

        // Uncomment the following line to display an Edit button in the navigation bar for this view controller.
        // self.navigationItem.rightBarButtonItem = self.editButtonItem()
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }

    // MARK: - Table view data source

    override func numberOfSectionsInTableView(tableView: UITableView) -> Int {
        // Return the number of sections.
        return tableData2.count
    }

    override func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        // #warning Incomplete method implementation.
        // Return the number of rows in the section.
        let buildings = sorted(tableData2.keys)
        let key = buildings[section]
        if let items = tableData2[key] as? NSArray {
            return items.count
        } else {
            return 0
        }
    }

    
    override func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCellWithIdentifier("Cell", forIndexPath: indexPath) as! UITableViewCell
        // Configure the cell...

        let buildings = sorted(tableData2.keys)
        let key = buildings[indexPath.section]
        
        if let items = tableData2[key] as? NSArray {
            var sortedItems = sortItems(items)
            cell.textLabel?.text = sortedItems[indexPath.row] as? String
            cell.detailTextLabel?.text = ""
        }
        
        return cell
    }
    
    override func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {
        
        // if we are
        var selectedItem = ""
        let buildings = sorted(tableData2.keys)
        let key = buildings[indexPath.section]
        
        if let items = tableData2[key] as? NSArray {
            var sortedItems = sortItems(items)
            selectedItem = sortedItems[indexPath.row] as! String
        }
        
        // get the building data from the IndoorNavigationService
        let building = IndoorNavigationService.sharedInstance.getBuilding(selectedItem)
        selectedValue = building["dataURL"]
        
        // call the close seque
        performSegueWithIdentifier("unwindSegue", sender: self)
        
    }
    
    override func tableView(tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        
        let  headerCell = tableView.dequeueReusableCellWithIdentifier("HeaderCell") as! SiteNavTableSearchHeaderCell
        //        headerCell.tintColor = UIColor(rgba: "#ffffff")
        headerCell.backgroundColor = UIColor(rgba: "#666666")
        let buildings = sorted(tableData2.keys)
        
        headerCell.headerLabel.text = buildings[section]
        headerCell.headerLabel.textColor = UIColor(rgba: "#ffffff")
        
        return headerCell
    }
    
    // Mark: - Selectable
    func getSelectedValue() -> AnyObject? {
        return selectedValue
    }


    /*
    // Override to support conditional editing of the table view.
    override func tableView(tableView: UITableView, canEditRowAtIndexPath indexPath: NSIndexPath) -> Bool {
        // Return NO if you do not want the specified item to be editable.
        return true
    }
    */

    /*
    // Override to support editing the table view.
    override func tableView(tableView: UITableView, commitEditingStyle editingStyle: UITableViewCellEditingStyle, forRowAtIndexPath indexPath: NSIndexPath) {
        if editingStyle == .Delete {
            // Delete the row from the data source
            tableView.deleteRowsAtIndexPaths([indexPath], withRowAnimation: .Fade)
        } else if editingStyle == .Insert {
            // Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view
        }    
    }
    */

    /*
    // Override to support rearranging the table view.
    override func tableView(tableView: UITableView, moveRowAtIndexPath fromIndexPath: NSIndexPath, toIndexPath: NSIndexPath) {

    }
    */

    /*
    // Override to support conditional rearranging of the table view.
    override func tableView(tableView: UITableView, canMoveRowAtIndexPath indexPath: NSIndexPath) -> Bool {
        // Return NO if you do not want the item to be re-orderable.
        return true
    }
    */

    /*
    // MARK: - Navigation

    // In a storyboard-based application, you will often want to do a little preparation before navigation
    override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {
        // Get the new view controller using [segue destinationViewController].
        // Pass the selected object to the new view controller.
    }
    */

    /*!
    * This function will populate the table with data from a URL
    *  Right now this can handle rss data and JSON data with the following format.
    *
    * JSON Format to display data in a
    * {"data":
    "children":[
    "data":{"title":"some title", "thumbnail":"http://someserver/image.jpg"}
    ]
    }
    *
    */
    private func populateTableData() {
        
        IndoorNavigationService.sharedInstance.getDataModel() {(results, error) -> Void in
            
            // TODO: check for error
            
            // reload the data since we have new data model
//            self.dataModel = results
            
            // process the dataModel by putting all the items in a map
            // where the key is a string like OHT D1
            var data = [String: [AnyObject]]()
//            self.tableData = []
            // location array
            if let locations = results?["locations"] as? [AnyObject] {
                for loc in locations {
                    if let label = loc["label"] as? String {
                        // buildings array
                        if let buildings = loc["buildings"] as? NSArray {
                            for b in buildings {
                                if let name = b["label"] as? String {
                                    data["\(label) \(name)"] = []
                                    var arr = data["\(label) \(name)"]!
                                    // for each item...
                                    if let items = b["items"] as? NSArray {
                                        for i in items {
                                            if let label = i["label"] as? String {
                                                arr.append(label)
//                                                self.tableData.append(label)
                                            }
                                        } // for each item
                                    } // if items
                                    data["\(label) \(name)"] = arr
                                } // if label
                            } // for each building
                        } // if buildings
                    } // if alias
                } // for
            }
            self.tableData2 = data
            self.tableView.reloadData()
        }
    }
    
    private func sortItems(items:NSArray) -> NSArray {
        
        var sortedItems = items.sortedArrayUsingComparator {
            (obj1, obj2) -> NSComparisonResult in
            let s1 = obj1 as! String
            let s2 = obj2 as! String
            let result = s1.compare(s2)
            return result
        }
        return sortedItems
    }

    
}
